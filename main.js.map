{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/excelimport/excelimport.component.css","webpack:///./src/app/excelimport/excelimport.component.html","webpack:///./src/app/excelimport/excelimport.component.ts","webpack:///./src/app/service/user.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<app-excelimport></app-excelimport>\\n\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ExcelUploading';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ExcelimportComponent } from './excelimport/excelimport.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ExcelimportComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2V4Y2VsaW1wb3J0L2V4Y2VsaW1wb3J0LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"container\\\">\\n    <br>\\n\\n    <img src=\\\"https://ictrecruit.co.za/wp-content/uploads/2019/08/logo.png\\\"/>\\n    <h1 align='center'>Macgyver Excel question c# test </h1>\\n    <hr>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <input class=\\\"form-control\\\" type=\\\"file\\\" #fileInput />\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n            <button class=\\\"btn btn-primary\\\" (click)=\\\"uploadFile();\\\">Upload</button>\\n        </div>\\n    </div>\\n    <div>\\n        <h4 class=\\\"alert-success\\\">{{message}}</h4>\\n    </div>\\n    <div>\\n        <table class=\\\"table\\\">\\n            <tr class=\\\"btn-primary\\\">\\n                <th>User Id</th>\\n                <th>UserName</th>\\n                <th>Email Id</th>\\n                <th>Gender</th>\\n                <th>Address</th>\\n                <th>MobileNo</th>\\n                <th>PinCode</th>\\n\\n            </tr>\\n            <tr *ngFor=\\\"let user of allUsers | async\\\">\\n                <td style=\\\"width: 100px\\\">{{user.UserId}}</td>\\n                <td>{{user.UserName }}</td>\\n                <td>{{user.EmailId}}</td>\\n                <td>{{user.Gender}}</td>\\n                <td>{{user.Address}}</td>\\n                <td style=\\\"width: 200px\\\">{{user.MobileNo}}</td>\\n                <td>{{user.PinCode}}</td>\\n\\n            </tr>\\n\\n        </table>\\n    </div>\\n</div>\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../service/user.service';\nimport { User } from '../model/user';\n\n@Component({\n  selector: 'app-excelimport',\n  templateUrl: './excelimport.component.html',\n  styleUrls: ['./excelimport.component.css']\n})\nexport class ExcelimportComponent implements OnInit {\n  @ViewChild('fileInput') fileInput;\n  message: string;\n  allUsers: Observable<User[]>;\n  constructor(private http: HttpClient, private service: UserService) { }\n\n  ngOnInit() {\n    this.loadAllUser();\n  }\n  loadAllUser() {\n    this.allUsers = this.service.BindUser();\n  }\n  uploadFile() {\n    let formData = new FormData();\n    formData.append('upload', this.fileInput.nativeElement.files[0])\n\n    this.service.UploadExcel(formData).subscribe(result => {\n      this.message = result.toString();\n      this.loadAllUser();\n    });\n   \n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http'\nimport { User } from '../model/user';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  url = 'http://macgyverdev.somee.com/Api/Excel';\n\n  UploadExcel(formData: FormData) {\n    let headers = new HttpHeaders();\n\n    headers.append('Content-Type', 'multipart/form-data');\n    headers.append('Accept', 'application/json');\n\n    const httpOptions = { headers: headers };\n\n    return this.http.post(this.url + '/UploadExcel', formData, httpOptions)\n  }\n  BindUser(): Observable<User[]> {\n    return this.http.get<User[]>(this.url + '/UserDetails');\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}